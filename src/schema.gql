# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Approval {
  id: String!
  approved: Boolean!
  approverComments: String!
  approver: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type SubscriptionEntity {
  id: String!
  subscriptionType: SubscriptionType!
  status: SubscriptionStatus!
  user: User!
  startDate: DateTime!
  endDate: DateTime!
  renewalPeriod: Int
}

enum SubscriptionType {
  Monthly
  Annual
}

enum SubscriptionStatus {
  Active
  Expired
  Cancelled
}

type ProductFeature {
  id: String!
  name: String!
}

type Product {
  id: String!
  name: String!
  price: Float
  description: String
  maxUsers: Float
  productFeatures: [ProductFeature!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Plan {
  id: String!
  name: String!
  description: String!
  price: Float!
  duration: Int!
  status: String!
  billingCycle: String!
  autoRenew: Boolean!
  trialPeriodDays: Float!
  products: [Product!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Request {
  id: ID!
  requestType: String!
  user: User!
  plan: Plan!
  subscription: SubscriptionEntity!
  approvals: [Approval!]
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User {
  id: ID!
  username: String!
  email: String!
  firstName: String!
  lastName: String!
  roles: [String!]!
<<<<<<< HEAD
  isVerified: Boolean!
  passwordChangedAt: DateTime!
=======
  subscriptions: [SubscriptionEntity!]!
>>>>>>> aa19283161e753a6b3d268c952e190c9a303435f
}

type StatusResult {
  message: String!
  success: Boolean!
  id: ID!
}

type AuthenticatedPayload {
  access_token: String!
  userId: String!
}

type Query {
  findAllUser: [User!]!
  findUserById(userId: String!): User!
  usersCount: Int!
  findProducts: [Product!]!
  findProduct(productId: String!): Product!
  getAllRequests: [Request!]!
  getRequestById(requestId: ID!): Request!
  requestsCount: Int!
  findPlans: [Plan!]!
  findPlan(planId: String!): Plan!
  findAllSubscriptions: [SubscriptionEntity!]!
  findSubscriptionById(id: String!): SubscriptionEntity!
  userSubscriptions(userId: String!): [SubscriptionEntity!]!
  subsCount: Int!
  approvals: [Approval!]!
  approval(id: String!): Approval!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): StatusResult!
  removeUser(id: String!): StatusResult!
  register(registerInput: RegisterInput!): AuthenticatedPayload!
  login(loginInput: LoginInput!): AuthenticatedPayload!
  createProduct(productData: CreateProductInput!): Product!
  updateProduct(id: String!, productData: UpdateProductDTO!): Product!
  removeProduct(id: String!): Product!
  createRequest(createRequestInput: CreateRequestDto!): Request!
  createPlan(planData: CreatePlanInput!): Plan!
  updatePlan(id: String!, planData: UpdatePlanInput!): Plan!
  approveRequest(approvalId: String!, approverId: String!, comments: String!): Approval!
}

input CreateUserInput {
  username: String!
  password: String!
  email: String!
  firstName: String!
  lastName: String!
  selectedRoles: [String!]!
}

input UpdateUserInput {
  password: String!
  firstName: String!
  lastName: String!
}

input RegisterInput {
  username: String!
  password: String!
  email: String!
  firstName: String!
  lastName: String!
  selectedRoles: [String!]!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateProductInput {
  name: String!
  price: Float
  description: String
  maxUsers: Float
  productFeatures: [CreateProductFeatureInput]
}

input CreateProductFeatureInput {
  name: String!
}

input UpdateProductDTO {
  name: String
}

input CreateRequestDto {
  requestType: RequestType! = NewSubscription
  subscriptionId: String
  renewalType: SubscriptionType
  userId: String!
  planId: String!
}

enum RequestType {
  SubscriptionRenewal
  SubscriptionUpgrade
  NewSubscription
}

input CreatePlanInput {
  name: String!
  description: String!
  price: Float!
  duration: Int!
  status: PlanStatus!
  billingCycle: String
  autoRenew: Boolean!
  trialPeriodDays: Int
  productIds: [String!]
}

enum PlanStatus {
  ACTIVE
  DISCONTINUED
}

input UpdatePlanInput {
  name: String
  description: String
  price: Float
  duration: Int
  status: PlanStatus
  billingCycle: String
  autoRenew: Boolean
  trialPeriodDays: Int
  productIds: [String!]
}