import { ValidationPipe } from "@nestjs/common";
import { NestFactory } from "@nestjs/core";
import { AppModule } from "./app.module";
import { useServer } from "graphql-ws/lib/use/ws";
import { createServer } from "http";
import { WebSocketServer } from "ws";
import { buildSchema, execute, subscribe } from "graphql";
import * as fs from "fs";
import jwt from "jsonwebtoken";
import { join } from "path";
const schemaString = fs.readFileSync(
  join(process.cwd(), "src/schema.gql"),
  "utf8"
);

// Create the schema object from the schema string
const schema = buildSchema(schemaString);
// Import your findUser function here
const findUser = async (authToken) => {
  // Find a user by their auth token
  console.log(authToken);
  try {
    // Verify and decode the JWT token
    const userPayload = jwt.verify(authToken, "123456");
    // You can perform additional checks if needed
    console.log(userPayload);

    return userPayload; // Return user information from the token
  } catch (error) {
    // Token is invalid or expired
    return null;
  }
};

// Function to set dynamic context based on authentication
const getDynamicContext = async (ctx, msg, args) => {
  if (ctx.connectionParams.authentication) {
    const currentUser = await findUser(ctx.connectionParams.authentication);
    return { currentUser };
  }
  // Let the resolvers know we don't have a current user so they can
  // throw the appropriate error
  return { currentUser: null };
};
async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.useGlobalPipes(new ValidationPipe());
  // Enable CORS
  app.enableCors({
    origin: ["http://localhost:5173", "http://localhost:3000"], // Specify the client origin or use '*' for allowing any origin
    methods: "GET,HEAD,PUT,PATCH,POST,DELETE", // Allowed methods
    credentials: true, // This is important for sending cookies and authorization headers with CORS
  });

  const httpServer = createServer(app.getHttpServer());

  // Create a WebSocket server instance
  const wsServer = new WebSocketServer({
    server: httpServer,
    path: "/graphql",
  });

    // Add debugging statements to check if the WebSocket server is being created
  console.log("WebSocket Server Created");


  // Use `graphql-ws` to handle the WebSocket server with dynamic context
  useServer(
    {
      schema, // Your GraphQL schema
      execute,
      subscribe,
      // Set dynamic context based on authentication
      context: async (ctx, msg, args) => {
        return getDynamicContext(ctx, msg, args);
      },
    },
    wsServer
  );
  await app.listen(3004);
}
bootstrap();
